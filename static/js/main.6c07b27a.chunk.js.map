{"version":3,"sources":["components/ContactForm/ContactForm.js","components/ContactList/ContactList.js","components/Filter/Filter.js","App.js","index.js"],"names":["ContactForm","state","number","name","handleInputChange","e","currentTarget","value","setState","handleSubmit","preventDefault","props","onSubmit","reset","this","type","onChange","pattern","title","required","Component","ContactList","contacts","OnDeleteContact","map","id","onClick","Filter","App","filter","addContact","some","contact","toLowerCase","alert","newContact","uuid","deleteContact","prevState","changeFilter","filterContacts","normalizeFilter","includes","className","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qSA8DeA,E,4MA1DbC,MAAQ,CACNC,OAAQ,GACRC,KAAM,I,EAGRC,kBAAoB,SAACC,GACnB,MAAwBA,EAAEC,cAAlBH,EAAR,EAAQA,KAAMI,EAAd,EAAcA,MACd,EAAKC,SAAL,eAAiBL,EAAOI,K,EAG1BE,aAAe,SAACJ,GACdA,EAAEK,iBACF,EAAKC,MAAMC,SAAS,EAAKX,OACzB,EAAKY,S,EAGPA,MAAQ,WACN,EAAKL,SAAS,CAAEL,KAAM,GAAID,OAAQ,M,4CAGpC,WACE,OACE,uBAAMU,SAAUE,KAAKL,aAArB,UACE,gCACE,sCACA,uBACEM,KAAK,OACLZ,KAAK,OACLI,MAAOO,KAAKb,MAAME,KAClBa,SAAUF,KAAKV,kBACfa,QAAQ,yHACRC,MAAM,kcACNC,UAAQ,OAIZ,gCACE,wCACA,uBACEJ,KAAK,MACLZ,KAAK,SACLI,MAAOO,KAAKb,MAAMC,OAClBc,SAAUF,KAAKV,kBACfa,QAAQ,yFACRC,MAAM,giBACNC,UAAQ,OAGZ,wD,GAjDkBC,aC0BXC,MA3Bf,YAAqD,IAA9BC,EAA6B,EAA7BA,SAAUC,EAAmB,EAAnBA,gBAC/B,OACE,6BACGD,EAASE,KAAI,gBAAGC,EAAH,EAAGA,GAAItB,EAAP,EAAOA,KAAMD,EAAb,EAAaA,OAAb,OACZ,+BACE,+BAAOC,IACP,+BAAOD,IACP,wBAAQa,KAAK,SAASW,QAAS,kBAAMH,EAAgBE,IAArD,sBAHOA,SCSFE,MAbf,YAA+B,IAAbX,EAAY,EAAZA,SAChB,OACE,0DAEE,uBAAOD,KAAK,OAAOZ,KAAK,SAASa,SAAUA,Q,QCqElCY,E,4MAhEb3B,MAAQ,CACNqB,SAAU,CACR,CAAEG,GAAI,OAAQtB,KAAM,gBAAiBD,OAAQ,aAC7C,CAAEuB,GAAI,OAAQtB,KAAM,iBAAkBD,OAAQ,aAC9C,CAAEuB,GAAI,OAAQtB,KAAM,gBAAiBD,OAAQ,aAC7C,CAAEuB,GAAI,OAAQtB,KAAM,iBAAkBD,OAAQ,cAEhD2B,OAAQ,I,EAGVC,WAAa,YAAuB,IAApB3B,EAAmB,EAAnBA,KAAMD,EAAa,EAAbA,OACpB,GACE,EAAKD,MAAMqB,SAASS,MAClB,SAACC,GAAD,OAAaA,EAAQ7B,KAAK8B,gBAAkB9B,EAAK8B,iBAGnD,OAAOC,MAAM,GAAD,OAAI/B,EAAJ,6BAEZ,IAAMgC,EAAa,CACjBV,GAAIW,cACJjC,OACAD,UAEF,EAAKM,UAAS,gBAAGc,EAAH,EAAGA,SAAH,MAAmB,CAC/BA,SAAS,CAAEa,GAAH,mBAAkBb,S,EAKhCe,cAAgB,SAACZ,GACf,EAAKjB,UAAS,SAAC8B,GAAD,MAAgB,CAC5BhB,SAAUgB,EAAUhB,SAASO,QAAO,SAACG,GAAD,OAAaA,EAAQP,KAAOA,U,EAIpEc,aAAe,SAAClC,GACd,EAAKG,SAAS,CAAEqB,OAAQxB,EAAEC,cAAcC,S,EAG1CiC,eAAiB,WACf,IAAMC,EAAkB,EAAKxC,MAAM4B,OAAOI,cAE1C,OAAO,EAAKhC,MAAMqB,SAASO,QAAO,SAACG,GAAD,OAChCA,EAAQ7B,KAAK8B,cAAcS,SAASD,O,4CAIxC,WACE,OACE,sBAAKE,UAAU,MAAf,UACE,2CACA,cAAC,EAAD,CAAa/B,SAAUE,KAAKgB,aAE5B,0CACA,cAAC,EAAD,CAAQd,SAAUF,KAAKyB,eACvB,cAAC,EAAD,CACEjB,SAAUR,KAAK0B,iBACfjB,gBAAiBT,KAAKuB,uB,GA1DdjB,aCJlBwB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.6c07b27a.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nclass ContactForm extends Component {\r\n  state = {\r\n    number: \"\",\r\n    name: \"\",\r\n  };\r\n\r\n  handleInputChange = (e) => {\r\n    const { name, value } = e.currentTarget;\r\n    this.setState({ [name]: value });\r\n  };\r\n\r\n  handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    this.props.onSubmit(this.state);\r\n    this.reset();\r\n  };\r\n\r\n  reset = () => {\r\n    this.setState({ name: \"\", number: \"\" });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <form onSubmit={this.handleSubmit}>\r\n        <div>\r\n          <h2>Name</h2>\r\n          <input\r\n            type=\"text\"\r\n            name=\"name\"\r\n            value={this.state.name}\r\n            onChange={this.handleInputChange}\r\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n            required\r\n          />\r\n        </div>\r\n\r\n        <div>\r\n          <h2>Number</h2>\r\n          <input\r\n            type=\"tel\"\r\n            name=\"number\"\r\n            value={this.state.number}\r\n            onChange={this.handleInputChange}\r\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n            required\r\n          />\r\n        </div>\r\n        <button>Add contact</button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nContactForm.propTypes = {\r\n  onSubmit: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default ContactForm;\r\n","import PropTypes from \"prop-types\";\r\n\r\nfunction ContactList({ contacts, OnDeleteContact }) {\r\n  return (\r\n    <ul>\r\n      {contacts.map(({ id, name, number }) => (\r\n        <li key={id}>\r\n          <span>{name}</span>\r\n          <span>{number}</span>\r\n          <button type=\"button\" onClick={() => OnDeleteContact(id)}>\r\n            Delete\r\n          </button>\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  );\r\n}\r\n\r\nContactList.propTypes = {\r\n  contacts: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.string.isRequired,\r\n      name: PropTypes.string.isRequired,\r\n      number: PropTypes.string.isRequired,\r\n    })\r\n  ),\r\n  onDeleteContact: PropTypes.func,\r\n};\r\n\r\nexport default ContactList;\r\n","import PropTypes from \"prop-types\";\r\n\r\nfunction Filter({ onChange }) {\r\n  return (\r\n    <label>\r\n      Find contacts by name\r\n      <input type=\"text\" name=\"filter\" onChange={onChange} />\r\n    </label>\r\n  );\r\n}\r\n\r\nFilter.propTypes = {\r\n  onChange: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default Filter;\r\n","// import logo from './logo.svg';\nimport \"./App.css\";\nimport { Component } from \"react\";\n\nimport ContactForm from \"./components/ContactForm/ContactForm\";\nimport ContactList from \"./components/ContactList/ContactList\";\nimport Filter from \"./components/Filter/Filter\";\n\nimport { v1 as uuid } from \"uuid\";\n\nclass App extends Component {\n  state = {\n    contacts: [\n      { id: \"id-1\", name: \"Rosie Simpson\", number: \"459-12-56\" },\n      { id: \"id-2\", name: \"Hermione Kline\", number: \"443-89-12\" },\n      { id: \"id-3\", name: \"Eden Clements\", number: \"645-17-79\" },\n      { id: \"id-4\", name: \"Annie Copeland\", number: \"227-91-26\" },\n    ],\n    filter: \"\",\n  };\n\n  addContact = ({ name, number }) => {\n    if (\n      this.state.contacts.some(\n        (contact) => contact.name.toLowerCase() === name.toLowerCase()\n      )\n    ) {\n      return alert(`${name} is already in contacts.`);\n    } else {\n      const newContact = {\n        id: uuid(),\n        name,\n        number,\n      };\n      this.setState(({ contacts }) => ({\n        contacts: [newContact, ...contacts],\n      }));\n    }\n  };\n\n  deleteContact = (id) => {\n    this.setState((prevState) => ({\n      contacts: prevState.contacts.filter((contact) => contact.id !== id),\n    }));\n  };\n\n  changeFilter = (e) => {\n    this.setState({ filter: e.currentTarget.value });\n  };\n\n  filterContacts = () => {\n    const normalizeFilter = this.state.filter.toLowerCase();\n\n    return this.state.contacts.filter((contact) =>\n      contact.name.toLowerCase().includes(normalizeFilter)\n    );\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>Phonebook</h1>\n        <ContactForm onSubmit={this.addContact} />\n\n        <h2>Contacts</h2>\n        <Filter onChange={this.changeFilter} />\n        <ContactList\n          contacts={this.filterContacts()}\n          OnDeleteContact={this.deleteContact}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n// import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}